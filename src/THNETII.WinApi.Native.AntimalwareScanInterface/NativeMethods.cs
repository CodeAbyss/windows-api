using System.Runtime.InteropServices;

namespace THNETII.WinApi.Native.AntimalwareScanInterface
{
    /// <summary>
    /// Declares the native functions to use with the Antimalware Scan Interface technology in the Windows API
    /// </summary>
    /// <remarks>
    /// <para>Original MSDN documentation page: <a href="https://docs.microsoft.com/en-us/windows/desktop/api/_amsi/">Antimalware Scan Interface</a></para>
    /// </remarks>
    public static class NativeMethods
    {
        private const string AmsiDll = "Amsi.dll";

        #region AmsiInitialize function
        /// <summary>
        /// Initialize the AMSI API.
        /// </summary>
        /// <param name="appName">The name, version, or GUID string of the app calling the AMSI API.</param>
        /// <param name="amsiContext">Receives the AMSI Context handle that must be passed to all subsequent calls to the AMSI API.</param>
        /// <returns>
        /// If this function succeeds, it returns <see cref="S_OK"/>. Otherwise, it returns an <see cref="HRESULT"/> error code.
        /// </returns>
        /// <remarks>
        /// When the app is finished with the AMSI API it must call <see cref="AmsiUninitialize"/> or <see cref="AmsiContext.Dispose"/> the context returned in the <paramref name="amsiContext"/> parameter.
        /// <para>Original MSDN documentation page: <a href="https://docs.microsoft.com/en-us/windows/desktop/api/amsi/nf-amsi-amsiinitialize">AmsiInitialize function</a></para>
        /// </remarks>
        /// <seealso cref="AmsiUninitialize"/>
        [return: MarshalAs(UnmanagedType.Error)]
        [DllImport(AmsiDll, CallingConvention = CallingConvention.StdCall)]
        public static extern int AmsiInitialize(
            [In, MarshalAs(UnmanagedType.LPWStr)] string appName,
            out AmsiContext amsiContext
            );
        #endregion
    }
}
