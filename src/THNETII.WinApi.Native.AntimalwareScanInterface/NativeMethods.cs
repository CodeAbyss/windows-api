using System.Runtime.InteropServices;

namespace THNETII.WinApi.Native.AntimalwareScanInterface
{
    using static __AMSI_H__;

    /// <summary>
    /// Declares the native functions to use with the Antimalware Scan Interface technology in the Windows API
    /// </summary>
    /// <remarks>
    /// <para>Original MSDN documentation page: <a href="https://docs.microsoft.com/en-us/windows/desktop/api/_amsi/">Antimalware Scan Interface</a></para>
    /// </remarks>
    public static class NativeMethods
    {
        private const string AmsiDll = "Amsi.dll";

        #region AmsiCloseSession function
        /// <summary>
        /// Close a session that was opened by <see cref="AmsiOpenSession"/>.
        /// </summary>
        /// <param name="amsiContext">The AMSI Context handle that was initially received from <see cref="AmsiInitialize"/>.</param>
        /// <param name="amsiSession">The AMSI Session handle that was initially received from <see cref="AmsiOpenSession"/>.</param>
        /// <remarks>
        /// <para>Original MSDN documentation page: <a href="https://docs.microsoft.com/en-us/windows/desktop/api/amsi/nf-amsi-amsiclosesession">AmsiCloseSession function</a></para>
        /// </remarks>
        /// <seealso cref="AmsiInitialize"/>
        /// <seealso cref="AmsiOpenSession"/>
        [DllImport(AmsiDll, CallingConvention = CallingConvention.StdCall)]
        public static extern void AmsiCloseSession(
            [In] AmsiContext amsiContext,
            [In] AmsiSession amsiSession
            );
        #endregion
        #region AmsiInitialize function
        /// <summary>
        /// Initialize the AMSI API.
        /// </summary>
        /// <param name="appName">The name, version, or GUID string of the app calling the AMSI API.</param>
        /// <returns>
        /// The AMSI Context handle that must be passed to all subsequent calls to the AMSI API.
        /// </returns>
        /// <remarks>
        /// When the app is finished with the AMSI API it must call <see cref="AmsiUninitialize"/>.
        /// <para>Original MSDN documentation page: <a href="https://docs.microsoft.com/en-us/windows/desktop/api/amsi/nf-amsi-amsiinitialize">AmsiInitialize function</a></para>
        /// </remarks>
        /// <seealso cref="AmsiUninitialize"/>
        [DllImport(AmsiDll, CallingConvention = CallingConvention.StdCall, PreserveSig = false)]
        public static extern AmsiContext AmsiInitialize(
            [In, MarshalAs(UnmanagedType.LPWStr)] string appName
            );
        #endregion
        #region AmsiOpenSession function
        /// <summary>
        /// Opens a session within which multiple scan requests can be correlated.
        /// </summary>
        /// <param name="amsiContext">The AMSI Context handle that was initially received from <see cref="AmsiInitialize"/>.</param>
        /// <returns>
        /// AMSI Session handle that must be passed to all subsequent calls to the AMSI API within the session.
        /// </returns>
        /// <remarks>
        /// When the app is finished with the session it must call <see cref="AmsiCloseSession"/>.
        /// <para>Original MSDN documentation page: <a href="https://docs.microsoft.com/en-us/windows/desktop/api/amsi/nf-amsi-amsiopensession">AmsiOpenSession function</a></para>
        /// </remarks>
        /// <seealso cref="AmsiCloseSession"/>
        /// <seealso cref="AmsiInitialize"/>
        [DllImport(AmsiDll, CallingConvention = CallingConvention.StdCall, PreserveSig = false)]
        public static extern AmsiSession AmsiOpenSession(
            [In] AmsiContext amsiContext
            );
        #endregion
        #region AmsiScanBuffer function
        /// <summary>
        /// Scans a buffer-full of content for malware.
        /// </summary>
        /// <param name="amsiContext">The AMSI Context handle that was initially received from <see cref="AmsiInitialize"/>.</param>
        /// <param name="buffer">The buffer from which to read the data to be scanned.</param>
        /// <param name="length">The length, in bytes, of the data to be read from <paramref name="buffer"/>.</param>
        /// <param name="contentName">The filename, URL, unique script ID, or similar of the content being scanned.</param>
        /// <param name="amsiSession">
        /// If multiple scan requests are to be correlated within a session,
        /// set <paramref name="amsiSession"/> to the handle that was initially
        /// received from <see cref="AmsiOpenSession"/>. Otherwise, omit <paramref name="amsiSession"/>
        /// or set it to <c>null</c>.
        /// </param>
        /// <returns>
        /// <para>The result of the scan. See <see cref="AMSI_RESULT"/>.</para>
        /// <para>An app should use <see cref="AmsiResultIsMalware"/> to determine whether the content should be blocked.</para>
        /// </returns>
        /// <remarks>
        /// <para>Original MSDN documentation page: <a href="https://docs.microsoft.com/en-us/windows/desktop/api/amsi/nf-amsi-amsiscanbuffer">AmsiScanBuffer function</a></para>
        /// </remarks>
        /// <seealso cref="AMSI_RESULT"/>
        /// <seealso cref="AmsiInitialize"/>
        /// <seealso cref="AmsiOpenSession"/>
        /// <seealso cref="AmsiResultIsMalware"/>
        [DllImport(AmsiDll, CallingConvention = CallingConvention.StdCall, PreserveSig = false)]
        public static extern AMSI_RESULT AmsiScanBuffer(
            [In] AmsiContext amsiContext,
            [In, MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 2)] byte[] buffer,
            [In] int length,
            [In, Optional, MarshalAs(UnmanagedType.LPWStr)] string contentName,
            [In, Optional] AmsiSession amsiSession
            );
        #endregion
        #region AmsiScanString function
        /// <summary>
        /// Scans a string for malware.
        /// </summary>
        /// <param name="amsiContext">The AMSI Context handle that was initially received from <see cref="AmsiInitialize"/>.</param>
        /// <param name="string">The string to be scanned.</param>
        /// <param name="contentName">The filename, URL, unique script ID, or similar of the content being scanned.</param>
        /// <param name="amsiSession">
        /// If multiple scan requests are to be correlated within a session,
        /// set <paramref name="amsiSession"/> to the handle that was initially
        /// received from <see cref="AmsiOpenSession"/>. Otherwise, omit <paramref name="amsiSession"/>
        /// or set it to <c>null</c>.
        /// </param>
        /// <returns>
        /// <para>The result of the scan. See <see cref="AMSI_RESULT"/>.</para>
        /// <para>An app should use <see cref="AmsiResultIsMalware"/> to determine whether the content should be blocked.</para>
        /// </returns>
        /// <remarks>
        /// <para>Original MSDN documentation page: <a href="https://docs.microsoft.com/en-us/windows/desktop/api/amsi/nf-amsi-amsiscanstring">AmsiScanString function</a></para>
        /// </remarks>
        /// <seealso cref="AMSI_RESULT"/>
        /// <seealso cref="AmsiInitialize"/>
        /// <seealso cref="AmsiOpenSession"/>
        /// <seealso cref="AmsiResultIsMalware"/>
        [DllImport(AmsiDll, CallingConvention = CallingConvention.StdCall, PreserveSig = false)]
        public static extern AMSI_RESULT AmsiScanString(
            [In] AmsiContext amsiContext,
            [In, MarshalAs(UnmanagedType.LPWStr)] string @string,
            [In, Optional, MarshalAs(UnmanagedType.LPWStr)] string contentName,
            [In, Optional] AmsiSession amsiSession
            );
        #endregion
        #region AmsiUninitialize function
        /// <summary>
        /// Remove the instance of the AMSI API that was originally opened by <see cref="AmsiInitialize"/>.
        /// </summary>
        /// <param name="amsiContext">The AMSI Context handle that was initially received from <see cref="AmsiInitialize"/>.</param>
        /// <remarks>
        /// <para>Original MSDN documentation page: <a href="https://docs.microsoft.com/en-us/windows/desktop/api/amsi/nf-amsi-amsiuninitialize">AmsiUninitialize function</a></para>
        /// </remarks>
        /// <seealso cref="AmsiInitialize"/>
        [DllImport(AmsiDll, CallingConvention = CallingConvention.StdCall)]
        public static extern void AmsiUninitialize(
            [In] AmsiContext amsiContext
            );
        #endregion
    }
}
