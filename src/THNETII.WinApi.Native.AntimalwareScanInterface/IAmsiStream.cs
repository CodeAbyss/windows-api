using System;
using System.Runtime.InteropServices;

namespace THNETII.WinApi.Native.AntimalwareScanInterface
{
    using static AMSI_ATTRIBUTE;

    /// <summary>
    /// Represents a stream to be scanned.
    /// </summary>
    /// <remarks>
    /// <para>Original MSDN documentation page: <a href="https://docs.microsoft.com/en-us/windows/desktop/api/amsi/nn-amsi-iamsistream">IAmsiStream interface</a></para>
    /// </remarks>
    [ComImport, Guid("3e47f2e5-81d4-4d3b-897f-545096770373")]
    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IAmsiStream
    {
        /// <summary>
        /// Returns a requested attribute from the stream.
        /// </summary>
        /// <param name="attribute">Specifies the type of attribute to be returned. See Remarks.</param>
        /// <param name="dataSize">The size of the output buffer, <paramref name="data"/>, in bytes.</param>
        /// <param name="data">Buffer to receive the requested attribute. <paramref name="data"/> must be set to its size in bytes.</param>
        /// <returns>
        /// The number of bytes returned in <paramref name="data"/>. If this method throws a <see cref="COMException"/> with an <see cref="Exception.HResult"/> of <see cref="E_NOT_SUFFICIENT_BUFFER"/>, the return value indicates the number of bytes required.
        /// </returns>
        /// <remarks>
        /// Depending on the attribute requested in attribute, the following data should be copied to data:
        /// <list type="table">
        /// <listheader><term><paramref name="attribute"/></term><description><paramref name="data"/></description></listheader>
        /// <item><term><see cref="AMSI_ATTRIBUTE_APP_NAME"/></term><description>The name, version, or GUID string of the calling application, copied from a null-terminated Uncode character string.</description></item>
        /// <item><term><see cref="AMSI_ATTRIBUTE_CONTENT_NAME"/></term><description>The filename, URL, unique script ID, or similar of the content, copied from a null-terminated Uncode character string.</description></item>
        /// <item><term><see cref="AMSI_ATTRIBUTE_CONTENT_SIZE"/></term><description>The size of the input, as a <see cref="ulong"/>.</description></item>
        /// <item><term><see cref="AMSI_ATTRIBUTE_CONTENT_ADDRESS"/></term><description>The memory address if the content is fully loaded into memory.</description></item>
        /// <item><term><see cref="AMSI_ATTRIBUTE_SESSION"/></term><description>Session is used to associate different scan calls, such as if the contents to be scanned belong to the same original script. Returns a null-pointer if the content is self-contained.</description></item>
        /// </list>
        /// <para>Original MSDN documentation page: <a href="https://docs.microsoft.com/en-us/windows/desktop/api/amsi/nf-amsi-iamsistream-getattribute">IAmsiStream::GetAttribute method</a></para>
        /// </remarks>
        /// <seealso cref="AMSI_ATTRIBUTE"/>
        /// <seealso cref="IAmsiStream"/>
        int GetAttribute(
            AMSI_ATTRIBUTE attribute,
            int dataSize,
            [MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 1)] byte[] data
            );
        /// <summary>
        /// Requests a buffer-full of content to be read.
        /// </summary>
        /// <param name="position">The zero-based index into the content at which the read is to begin.</param>
        /// <param name="size">The number of bytes to read from the content.</param>
        /// <param name="buffer">Buffer into which the content is to be read.</param>
        /// <returns>
        /// The number of bytes read into <paramref name="buffer"/>.
        /// </returns>
        /// <remarks>
        /// <para>Original MSDN documentation page: <a href="https://docs.microsoft.com/en-us/windows/desktop/api/amsi/nf-amsi-iamsistream-read">IAmsiStream::Read method</a></para>
        /// </remarks>
        /// <seealso cref="IAmsiStream"/>
        int Read(
            ulong position,
            int size,
            [MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 1)] byte[] buffer
            );
    }
}
