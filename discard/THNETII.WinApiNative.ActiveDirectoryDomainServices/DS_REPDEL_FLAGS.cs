using System;

namespace THNETII.WinApiNative.ActiveDirectoryDomainServices
{
    /// <summary>
    /// Replica Delete flags
    /// </summary>
    [Flags]
    public enum DS_REPDEL_FLAGS : uint
    {
        /// <summary>
        /// Perform this operation asynchronously.
        /// </summary>
        DS_REPDEL_ASYNCHRONOUS_OPERATION = unchecked(0x00000001),

        /// <summary>
        /// The replica being deleted is writeable.
        /// </summary>
        DS_REPDEL_WRITEABLE = unchecked(0x00000002),

        /// <summary>
        /// Replica is a mail-based replica
        /// </summary>
        DS_REPDEL_INTERSITE_MESSAGING = unchecked(0x00000004),

        /// <summary>
        /// Ignore any error generated by contacting the source to tell it to scratch
        /// this server from its Reps-To for this NC.
        /// </summary>
        DS_REPDEL_IGNORE_ERRORS = unchecked(0x00000008),

        /// <summary>
        /// Do not contact the source telling it to scratch this server from its
        /// Rep-To for this NC.  Otherwise, if the link is RPC-based, the source will
        /// be contacted.
        /// </summary>
        DS_REPDEL_LOCAL_ONLY = unchecked(0x00000010),

        /// <summary>
        /// Delete all the objects in the NC
        /// "No source" is incompatible with (and rejected for) writeable NCs.  This is
        /// valid only for read-only NCs, and then only if the NC has no source.  This
        /// can occur when the NC has been partially deleted (in which case the KCC
        /// periodically calls the delete API with the "no source" flag set).
        /// </summary>
        DS_REPDEL_NO_SOURCE = unchecked(0x00000020),

        /// <summary>
        /// Allow deletion of read-only replica even if it sources
        /// other read-only replicas.
        /// </summary>
        DS_REPDEL_REF_OK = unchecked(0x00000040),
    }
}
